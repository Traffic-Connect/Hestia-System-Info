#!/usr/bin/env bash
# v-system-info — кастомная команда HestiaCP
# Возвращает системную сводку в JSON.

set -euo pipefail
export LANG=C LC_ALL=C

# ---------- helpers ----------
json_escape() { sed 's/\\/\\\\/g; s/"/\\"/g' <<<"$1"; }
bool() { [[ "$1" == "true" ]] && echo true || echo false; }

# ---------- CPU ----------
CPU_MODEL="$(awk -F': ' '/^model name/{print $2; exit}' /proc/cpuinfo 2>/dev/null || true)"
if [[ -z "${CPU_MODEL}" ]]; then
  CPU_MODEL="$(lscpu 2>/dev/null | awk -F': *' '/Model name/{print $2; exit}' || true)"
fi
[[ -n "${CPU_MODEL}" ]] || CPU_MODEL="unknown"

# ---------- Disk (root "/") ----------
# Берём объём и использование именно корневого раздела.
# -PBG даёт значения в ГБ и стабильный парсинг
# Поля: 2=Size, 3=Used, 5=Use%
read -r DISK_TOTAL_GB DISK_USED_GB DISK_USED_PCT < <(
  df -PBG / 2>/dev/null | awk 'NR==2{gsub("G","",$2); gsub("G","",$3); gsub(/%/,"",$5); print $2, $3, $5}'
)
: "${DISK_TOTAL_GB:=0}"
: "${DISK_USED_GB:=0}"
: "${DISK_USED_PCT:=0}"

# ---------- Memory (total GB) ----------
MEM_TOTAL_KB="$(awk '/^MemTotal:/{print $2; exit}' /proc/meminfo 2>/dev/null || echo 0)"
MEM_TOTAL_GB="$(awk -v kb="${MEM_TOTAL_KB:-0}" 'BEGIN{printf("%.2f", kb/1024/1024)}')"

# ---------- OS version ----------
OS_VERSION="unknown"
if [[ -r /etc/os-release ]]; then
  # shellcheck source=/dev/null
  . /etc/os-release || true
  OS_VERSION="${PRETTY_NAME:-${NAME:-unknown}}"
fi

# ---------- Hestia version (robust) ----------
HESTIA_CONF="/usr/local/hestia/conf/hestia.conf"
HESTIA_VERSION="unknown"
if [[ -r "$HESTIA_CONF" ]]; then
  RAW_LINE="$(grep -m1 -E '^(HESTIA|VERSION|RELEASE)=' "$HESTIA_CONF" 2>/dev/null || true)"
  if [[ -n "${RAW_LINE}" ]]; then
    RAW_VAL="${RAW_LINE#*=}"
    # trim/strip quotes/CR
    HESTIA_VERSION="$(echo -n "$RAW_VAL" \
      | tr -d '\r' \
      | sed -e 's/^[[:space:]]*//; s/[[:space:]]*$//' \
             -e 's/^"//; s/"$//' \
             -e "s/^'//; s/'$//")"
    [[ -n "${HESTIA_VERSION}" ]] || HESTIA_VERSION="unknown"
  fi
fi
# fallback: version.txt
if [[ "${HESTIA_VERSION}" == "unknown" && -r /usr/local/hestia/web/version.txt ]]; then
  HESTIA_VERSION="$(tr -d '\n\r\t ' </usr/local/hestia/web/version.txt)"
  [[ -n "${HESTIA_VERSION}" ]] || HESTIA_VERSION="unknown"
fi
# последний шанс: системная v-команда
if [[ "${HESTIA_VERSION}" == "unknown" && -x /usr/local/hestia/bin/v-list-sys-info ]]; then
  HESTIA_VERSION="$(/usr/local/hestia/bin/v-list-sys-info 2>/dev/null | awk -F': *' '/Hestia/{print $2; exit}' || true)"
  [[ -n "${HESTIA_VERSION}" ]] || HESTIA_VERSION="unknown"
fi

# ---------- Remote backup status ----------
REMOTE_BACKUP_ENABLED=false
REMOTE_BACKUP_SYSTEM=""
if [[ -r "$HESTIA_CONF" ]]; then
  RAW_BACKUP="$(awk -F= '$1=="BACKUP_SYSTEM"{print $2; exit}' "$HESTIA_CONF" 2>/dev/null || true)"
  RAW_BACKUP="$(echo -n "$RAW_BACKUP" | tr -d '\r' | sed -e 's/^ *//; s/ *$//' -e 's/^"//; s/"$//' -e "s/^'//; s/'$//")"
  REMOTE_BACKUP_SYSTEM="${RAW_BACKUP}"
  lower="$(echo "${RAW_BACKUP}" | tr '[:upper:]' '[:lower:]')"
  case "${lower}" in
    ""|"local"|"none") REMOTE_BACKUP_ENABLED=false ;;
    *) REMOTE_BACKUP_ENABLED=true ;;
  esac
fi

# ---------- Root folders presence ----------
check_dir() { [[ -d "/root/$1" ]] && echo true || echo false; }
HAS_LINK_MANAGER="$(check_dir "link-manager")"
HAS_GOOGLE_AUTH="$(check_dir "google-auth")"
HAS_TC_API_SITE_DETAILS="$(check_dir "tc-api-site-details")"

# ---------- JSON-safe strings ----------
CPU_MODEL_ESC="$(json_escape "${CPU_MODEL}")"
OS_VERSION_ESC="$(json_escape "${OS_VERSION}")"
HESTIA_VERSION_ESC="$(json_escape "${HESTIA_VERSION}")"
REMOTE_BACKUP_SYSTEM_ESC="$(json_escape "${REMOTE_BACKUP_SYSTEM}")"

# ---------- Output ----------
cat <<EOF
{
  "status": "ok",
  "cpu_model": "${CPU_MODEL_ESC}",
  "os_version": "${OS_VERSION_ESC}",
  "hestia_version": "${HESTIA_VERSION_ESC}",
  "mem_total_gb": ${MEM_TOTAL_GB},
  "disk_total_gb": ${DISK_TOTAL_GB},
  "disk_used_gb": ${DISK_USED_GB},
  "disk_used_pct": ${DISK_USED_PCT},
  "remote_backup_enabled": $(bool "${REMOTE_BACKUP_ENABLED}"),
  "remote_backup_system": "${REMOTE_BACKUP_SYSTEM_ESC}",
  "root_folders": {
    "link-manager": ${HAS_LINK_MANAGER},
    "google-auth": ${HAS_GOOGLE_AUTH},
    "tc-api-site-details": ${HAS_TC_API_SITE_DETAILS}
  }
}
EOF
